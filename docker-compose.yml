version: '3.8'

services:
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: origami_postgres
    environment:
      POSTGRES_USER: origami
      POSTGRES_PASSWORD: origami
      POSTGRES_DB: origami_composer
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-timescaledb.sql:/docker-entrypoint-initdb.d/init-timescaledb.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U origami -d origami_composer"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: origami_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: origami_backend
    environment:
      DATABASE_URL: postgresql://origami:origami@postgres:5432/origami_composer
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  celery_worker:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: origami_celery_worker
    environment:
      DATABASE_URL: postgresql://origami:origami@postgres:5432/origami_composer
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    volumes:
      - ./backend:/app
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.celery_app worker --loglevel=info

  celery_beat:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: origami_celery_beat
    environment:
      DATABASE_URL: postgresql://origami:origami@postgres:5432/origami_composer
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
    volumes:
      - ./backend:/app
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.celery_app beat --loglevel=info

  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: origami_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
